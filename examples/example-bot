#!/usr/bin/env ruby
#
# Demonstration of InstantSlackBot API with command line interaction
# 
#   http://github.com/robzr/instant-slack-bot
#
#     -- @robzr 3/2016
#
require 'optparse'
require_relative '../instant_slack_bot'

channels = []
instabot_options = { }

OptionParser.new do |opts|
  program_name = $PROGRAM_NAME.sub(%r{.*/}, '')
  opts.banner = "Usage: #{program_name} [-c channel [-c ...]] [-r regex [-r ...]] [-h] -s token\n\n"

  opts.on('-c', '--channel', '=MANDATORY', 'Provide a channel name to monitor')     { |arg| channels << arg }
  opts.on('-r', '--channel-regex', '=MANDATORY', 'Regex pattern to match channels') { |arg| channels << %r{#{arg}} }
  opts.on('-h', '--help', 'Display this help.')                                     { abort opts.help }
  opts.on('-s', '--slack-token', '=MANDATORY', 'Specify the Slack API token')       { |arg| instabot_options[:token] = arg }
end.parse!

abort 'No Slack token specified - use -h for help' unless instabot_options[:token]

instabot = InstantSlackBot::Master.new instabot_options.merge({ channels: channels })

# Display details about the slack connection and bot state
puts "Logged into Slack as #{instabot.slack['user']} in team #{instabot.slack['team']} (#{instabot.slack['url']})"
puts "All users\n -> #{instabot.users.join("\n -> ")}"
puts "Available channels\n -> #{instabot.channels(:available).join("\n -> ")}"
puts "Subscribed channels\n -> #{instabot.channels(:subscribed).join("\n -> ")}"

# Simple, static trigger and response
instabot << InstantSlackBot::Bot.new(conditions: 'hello instabot', action: 'Hello, my friend')

# Regex trigger condition and an inline proc action
instabot << InstantSlackBot::Bot.new(conditions: /(who|how) are you, instabot/, 
                                     action: proc { |arg| "I\'m here and I\'m fine, #{arg[:user]}" })

# Proc based conditions and action
conditions = [
  proc do |arg|
    # responds if the message begins with "instabot short" and is less than 15 characters total
    arg[:channel] == 'general' && arg[:text].length < 15 && arg[:text] =~ /^instabot short/i
  end,
  proc do |arg|
    # responds if the message begins with "instabot long" and is more than 15 characters total
    arg[:channel] == 'general' && arg[:text].length > 15 && arg[:text] =~ /^instabot long/i
  end
]
action = proc do |arg|
  "*Matched _Text* from_ ~#{arg[:user]}~ in ##{arg[:channel]}\n>>>#{arg[:text]}"
end

instabot << InstantSlackBot::Bot.new(conditions: conditions, action: action)

puts "Running #{instabot.bots.length} bots"
instabot.bots.each_index do |idx|
  conditions = instabot.bots[idx].conditions
  printf " -> #%d has %d condition%s\n", 
    idx + 1, conditions.length, conditions.length > 1 ? 's' : ''
end

instabot.run
