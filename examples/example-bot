#!/usr/bin/env ruby
#
# Demonstration of InstantSlackBot API with command line interaction
# 
#   http://github.com/robzr/instant-slack-bot
#
#     -- @robzr 3/2016
#
require_relative '../instant_slack_bot'

instabot = InstantSlackBot::Master.new(token: ENV['SLACK_TOKEN'])

# Print a few details about the Slack connection and Bot
puts "Logged into Slack as #{instabot.slack_connection['user']}"
puts "Using team #{instabot.slack_connection['team']} " \
  "(#{instabot.slack_connection['url']})"
puts "All users\n -> #{instabot.users.join("\n -> ")}"
puts "Available channels\n -> #{instabot.channels(:available).join("\n -> ")}"
puts "Subscribed channels\n -> #{instabot.channels(:subscribed).join("\n -> ")}"

# Static text trigger and response
simple_bot = InstantSlackBot::Bot.new(
  conditions: 'hello instabot', 
  action: 'Hello, my friend.'
)

# Register the bot with the master
instabot << simple_bot

# Add another bot using a Regex condition and an inline proc action
instabot << InstantSlackBot::Bot.new(
  conditions: /(who|how) are you, instabot/, 
  action: proc { |message| "I\'m here and I\'m fine, @#{message['username']}." }
)

# Lambda based condition array and action
conditions = [
  lambda do |message|
    message['channelname'] == 'general' && 
      message['text'].length < 15 &&
      message['text'] =~ /^instabot short/i
  end,
  lambda do |message|
    message['channelname'] == 'general' &&
      message['text'].length > 15 &&
      message['text'] =~ /^instabot long/i
  end
]
action = lambda do |message|
  "*Matched _Text* from_ ~#{message['username']}~ in ##{message['channelname']}"\
  "\n>>>#{message['text']}"
end

instabot << InstantSlackBot::Bot.new(conditions: conditions, action: action)

puts "Running #{instabot.bots.length} bots"

instabot.run
