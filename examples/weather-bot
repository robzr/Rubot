#!/usr/bin/env ruby
#
# InstantSlackBot based weather bot.
#   http://github.com/robzr/instant-slack-bot
#     -- @robzr 3/2016
#
# Depends on gems: slack-api weather_underground 

GIT_URL = 'https://github.com/robzr/instant-slack-bot/tree/master/examples'
BOT_HELP = <<-EOF.gsub(/^  /, '')
  >>> *Hello @%s, thanks for trying WeatherBot!*\n
  To retrieve the weather, just type \"_weather location_\"
  where _location_ is a zip code or a city, state\n
  _<#{GIT_URL}|See the closet where WeatherBot charges at night.>_\n
  EOF

require 'weather_underground'
require_relative '../instant_slack_bot'

abort 'Missing Slack token' unless ENV['SLACK_TOKEN']
abort 'Missing Weather Underground key' unless ENV['WUNDERGROUND_KEY']

def get_weather(message: message)
  location = message['text'].sub(/^weather\s+/, '')
  case location
  when 'help'
    sprintf BOT_HELP, message['username']
  when 'location'
    msg = ">_*Nice try @#{message['username']}, you clown.*_"
  else
    begin
      msg = ''
      forecast = WeatherUnderground::Base.new(
        ENV['WUNDERGROUND_KEY']
      ).forecast(location.to_s)
      if forecast['response'].key?('error')
        case forecast['response']['error']['type']
        when 'querynotfound'
          msg = ">_*Weather Underground could could not find the location " \
            "#{location}, try again.*_"
        else
          msg = ">_*Weather Underground returned error " \
            "#{forecast['response']['error']['type']} " \
            "(#{forecast['response']['error']['description']})*_"
        end
      elsif forecast['response'].key?('results')
        msg = '>_*The location you tried is ambiguious, try something more specific.*_'
      else
        msg = "*<#{forecast['current_observation']['forecast_url']}|" \
          "Current conditions - #{forecast['current_observation']['weather']}, " \
          "#{forecast['current_observation']['temp_f']}Â°F with " \
          "#{forecast['current_observation']['relative_humidity']} Humidity in " \
          "_#{forecast['current_observation']['display_location']['full']}._>*\n>>>"

        forecast['forecast']['txt_forecast']['forecastday'].each do |forecast_detail|
          msg << "*#{forecast_detail['title']}*  #{forecast_detail['fcttext']}\n"
        end
      end
      msg
    rescue StandardError => error_msg
      "Sorry, had trouble speaking with Weather Underground (#{error_msg})"
    end
  end
end

instabot_options = { 
  options: { 
    debug: true,
  },
  post_options: { 
    'icon_emoji' => ':partly_sunny:',
    'username' => 'WeatherBot',
  },
  token: ENV['SLACK_TOKEN']
}

master = InstantSlackBot::Master.new(instabot_options)
master << InstantSlackBot::Bot.new(conditions: /^weather\s+/,
                                   action: method(:get_weather),
                                   options: { debug: true })
master.run
