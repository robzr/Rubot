#!/usr/bin/env ruby
#
# Demonstration of Rubot API
#   https://github.com/emmadev/sysutils/Rubot
#     -- @robzr 3/2016

require 'optparse'
require_relative 'rubot'

channels = []
rubot_options = { }

OptionParser.new do |opts|
  program_name = $PROGRAM_NAME.sub(%r{.*/}, '')
  opts.banner = "Usage: #{program_name} [-c channel [-c ...]] [-r regex [-r ...]] [-h] -s token\n\n"

  opts.on('-c', '--channel', '=MANDATORY', 'Provide a channel name to monitor')     { |arg| channels << arg }
  opts.on('-r', '--channel-regex', '=MANDATORY', 'Regex pattern to match channels') { |arg| channels << %r{#{arg}} }
  opts.on('-h', '--help', 'Display this help.')                                     { abort opts.help }
  opts.on('-s', '--slack-token', '=MANDATORY', 'Specify the Slack API token')       { |arg| rubot_options[:slack_token] = arg }
end.parse!

abort 'No Slack token specified - use -h for help' unless rubot_options[:slack_token]

rubot = Rubot::Rubot.new rubot_options.merge({ channels: channels })

# Display details about the slack connection and bot state
puts "Logged into Slack as #{rubot.slack['user']} in team #{rubot.slack['team']} (#{rubot.slack['url']})"
puts "All available channels\n -> #{rubot.channels.join("\n -> ")}"
puts "All users\n -> #{rubot.users.join("\n -> ")}"
puts "Subscribed channels\n -> #{rubot.channels(:subscribed).join("\n -> ")}"

# Most simple incantation
rubot << Rubot::Trigger.new(conditions: 'hello rubot', callback: 'Hello, my friend')

# Using a regex condition and an inline proc callback
rubot << Rubot::Trigger.new(conditions: /(who|how) are you, rubot/, callback: proc { |arg| "I\'m here and I\'m fine, #{arg[:user]}" })

# More complex Trigger, using externally declared procs for both conditions and a trigger
i_was_triggered = proc do |arg|
  "*Matched _Text* from_ ~#{arg[:user]}~ in ##{arg[:channel]}\n>>>#{arg[:text]}"
end

conditions = [
  proc do |arg|
    arg[:channel] == 'general' && arg[:text].length < 15 && arg[:text] =~ /^rubot short/i
  end,
  proc do |arg|
  arg[:channel] == 'general' && arg[:text].length > 15 && arg[:text] =~ /^rubot long/i
  end
]

rubot << Rubot::Trigger.new(conditions: conditions, callback: i_was_triggered)

puts "Defined #{rubot.triggers.length} triggers"

rubot.run
