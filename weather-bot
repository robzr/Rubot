#!/usr/bin/env ruby
#
# Slabot based weather forecasting bot.
#
# Demonstration of Slabot Slack Bot framework:
#
#    https://github.com/emmadev/sysutils/tree/master/Slabot
#
#       -- @robzr 3/2016
#
# To Install, first:
#
# sudo gem install slack-api weather_underground

TRIGGER_PHRASE = 'weather'
BOT_HELP = ">>> *Hello %s, thanks for trying %s!*\n" \
    "To retrieve the weather, just type \"_#{TRIGGER_PHRASE} location_\", " \
    " where _location_ is a zip code or a city, state\n" \
    "_<https://github.com/robzr/Slabot|Slabot charges in a closet at night in github.>_\n"
CMDLINE_HELP = %(
  \nGet Slack API token at https://api.slack.com/docs/oauth-test-tokens\n
  Get Weather Underground API key at: https://www.wunderground.com/weather/api\n
  Channels and channel regex's can be specified multiple times. If none are
  specified, the default behavior is to monitor all available channels.\n
).gsub(/^  /, '')

require 'optparse'
require 'weather_underground'
require_relative 'slabot'

slabot_options = { 
  bot_name: 'Slabot',
  post_options: { icon_emoji: ':partly_sunny:' },
  debug: false
}

channels = []
options = {}

OptionParser.new do |opts|
  opts.banner = "Usage: #{$PROGRAM_NAME.sub(%r{.*/}, '')} [-b bot_name] [-c channel|-r regex [-c ...|-r ...]] -s token -w key\n\n"

  opts.on('-b', '--bot-name', '=MANDATORY', "Override default bot name (#{slabot_options[:bot_name]})") { |arg| slabot_options[:post_options][:bot_name] = arg }
  opts.on('-c', '--channel', '=MANDATORY', 'Provide a channel name to monitor')                  { |arg| channels << arg }
  opts.on('-h', '--help', 'Display this help.')                                                  { abort "#{opts.help}#{CMDLINE_HELP}" }
  opts.on('-q', '--quiet', 'Suppress output.')                                                   {       options[:quiet] = true }
  opts.on('-r', '--channel-regex', '=MANDATORY', 'Provide a regex for channels to monitor')      { |arg| channels << %r{arg} }
  opts.on('-s', '--slack-token', '=MANDATORY', 'Specify the Slack API token')                    { |arg| slabot_options[:slack_token] = arg }
  opts.on('-w', '--wu-key', '=MANDATORY', 'Specify the Weather Underground API key')             { |arg| options[:wu_key] = arg }
end.parse!

abort 'You must provide a Slack token - use -h for help' unless slabot_options[:slack_token]
abort 'You must provide a Weather Underground token - use -h for help' unless options[:wu_key]

slabot = Slabot::Slabot.new slabot_options.merge({ channels: channels, debug: true })

unless options[:quiet]
  puts "Using the name #{slabot.bot_name}\n" \
       "Found #{slabot.users.length} users online\n" \
       "Monitoring the following channels: #{slabot.channels(:subscribed).join(', ')}"
end

get_weather = proc do |arg|
  location = arg[:text].sub(/^#{TRIGGER_PHRASE}\s+/, '')
  case location
  when 'help'
    sprintf BOT_HELP, arg[:user], options[:bot_name]
  else
    print "Responding to #{arg[:user]} in #{arg[:channel]} for location #{location} - " unless options[:quiet]
    begin
      msg = ''
      forecast = WeatherUnderground::Base.new(options[:wu_key]).forecast(location.to_s)
      pp forecast if options[:debug]
      if forecast['response'].key?('error')
        case forecast['response']['error']['type']
        when 'querynotfound'
          puts 'could not find location.' unless options[:quiet]
          msg = ">_*Weather Underground could could not find the location #{location}, try again.*_"
        else
          puts "Weather Underground returned error #{forecast['response']['error']['type']} " \
               "(#{forecast['response']['error']['description']})." unless options[:quiet]
          msg = ">_*Weather Underground returned error #{forecast['response']['error']['type']} " \
                "(#{forecast['response']['error']['description']})*_"
        end
      elsif forecast['response'].key?('results')
        puts 'wunderground returned ambiguous results.' unless options[:quiet]
        msg = '>_*The location you tried is ambiguious, try something more specific.*_'
      else
        msg = "*Current conditions: <#{forecast['current_observation']['forecast_url']}|" \
          "#{forecast['current_observation']['weather']}, " \
          "#{forecast['current_observation']['temp_f']}Â° Degrees with " \
          "#{forecast['current_observation']['relative_humidity']} Humidity> in " \
          "_#{forecast['current_observation']['display_location']['full']}_*\n>>>"
        forecast['forecast']['txt_forecast']['forecastday'].each do |forecast_detail|
          msg << "*#{forecast_detail['title']}*  #{forecast_detail['fcttext']}\n"
        end
        puts 'forecast successfully returned.' unless options[:quiet]
      end
      msg
    rescue Exception => error_msg # TODO: clean handling
      puts "Wunderground raised exception (#{error_msg})" unless options[:quiet]
      "Sorry, had trouble speaking with Weather Underground (#{error_msg})"
    end
  end
end

slabot << Slabot::Trigger.new(conditions: %r{^#{TRIGGER_PHRASE}\s+.+}, callback: get_weather)

slabot.run
